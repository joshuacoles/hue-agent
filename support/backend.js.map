{"version":3,"sources":["backend.es6"],"names":[],"mappings":"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","file":"backend.js","sourcesContent":["import { graphql } from 'graphql'\nimport { api } from './props'\n\nconst ColourMode = new GraphQLEnumType({\n    name: 'ColorMode',\n    values: {\n        CT: { value: 0 },\n        XY: { value: 1 }\n    }\n});\n\nconst Bulb = new graphql.GraphQLObjectType({\n    name: 'Bulb',\n    fields: {\n        id: { type: new graphql.GraphQLNonNull(graphql.GraphQLString) },\n        name: { type: new graphql.GraphQLNonNull(graphql.GraphQLString) },\n\n        state: { type: new graphql.GraphQLNonNull(graphql.GraphQLBoolean) },\n        brightness: { type: new graphql.GraphQLNonNull(graphql.GraphQLInt) },\n\n        colourMode: { type: ColourMode },\n        xy: { type: new graphql.GraphQLList(graphql.GraphQLInt) },\n        ct: { type: graphql.GraphQLInt }\n    }\n});\n\nconst schema = new graphql.GraphQLSchema({\n    query: new graphql.GraphQLObjectType({\n        name: 'Query',\n        fields: {\n            bulb: {\n                type: Bulb,\n                args: {\n                    id: { type: graphql.GraphQLString }\n                },\n                resolve: (_, args) => {\n                    return native2graphql(args.id);\n                } //fixme implement reference\n            }\n        }\n    })\n});\n\nexport async function fetch(query) {\n    return await native2graphql(graphql(schema, query));\n}\n\nexport async function put(data) {\n    await api.setLightState(state.id, graphql2native(state)).then(() => true, (err) => err).done()\n}\n\nfunction graphql2native(state) {\n    const out = lightState.create().on(state.state).brightness(state.brightness);\n\n    if (state.colormode === 0) out.ct(state.ct);\n    else if (state.colormode === 1) out.rgb(state.rgb);\n\n    return out;\n}\n\nfunction colourMode2ID(colourMode) {\n    if (colourMode === 'ct') return 0;\n    else if (colourMode === 'xy') return 1;\n    else return -1;\n}\n\nasync function native2graphql(id) {\n    const status = await api.lightStatus(1);\n    const graphql = {\n        id,\n        name: status.name,\n\n        state: status.state.on,\n        brightness: Math.floor((status.state.bri / 255) * 100),\n\n        colourMode: colourMode2ID(status.colormode)\n    };\n\n    if (status.colormode === 'ct') graphql.ct = status.ct;\n    else if (status.colormode === 'xy') graphql.xy = status.xy;\n\n    return graphql;\n}\n"]}