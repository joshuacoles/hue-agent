{"version":3,"sources":["rmq.es6"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEqB,G;AACjB,iBAAY,GAAZ,EAAiB;AAAA;;AACb,aAAK,UAAL,GAAkB,kBAAK,OAAL,CAAa,GAAb,CAAlB;AACH;;;;;iFAEiB,E;;;;;;uCACA,KAAK,UAAL,CAAgB,IAAhB,CAAqB,sBAAc;AAC7C,+CAAW,aAAX,GAA2B,IAA3B,CAAgC,mBAAW;AACvC,gDAAQ,cAAR,CAAuB,EAAvB,EAA2B,OAA3B,EAAoC,EAAC,SAAS,KAAV,EAApC,EAAsD,IAAtD,CAA2D,gBAAgB;AAAA,gDAAd,QAAc,QAAd,QAAc;;AACvE,mDAAO,iBAAmB;AAAA,oDAAjB,KAAiB,SAAjB,KAAiB;AAAA,oDAAV,IAAU,SAAV,IAAU;;AACtB,wDAAQ,OAAR,CAAgB,QAAhB,EAA0B,KAA1B,EAAiC,IAAI,MAAJ,CAAW,KAAK,SAAL,CAAe,IAAf,CAAX,CAAjC;AACH,6CAFD;AAGH,yCAJD;AAKH,qCAND;AAOH,iCARa,C;;;;;;;;;;;;;;;;;;;;;oCAWN,E,EAAI,G,EAAK;AAAA;;AACjB,mBAAO,aAAG,UAAH,CAAc,MAAd,CAAqB,UAAC,QAAD,EAAc;AACtC,sBAAK,UAAL,CAAgB,aAAhB,GAAgC,IAAhC,CAAqC,mBAAW;AAC5C,4BAAQ,cAAR,CAAuB,eAAvB,EAAwC,OAAxC,EAAiD,EAAC,SAAS,KAAV,EAAjD,EACK,IADL,CACU;AAAA,+BAAM,QAAQ,WAAR,CAAoB,EAApB,CAAN;AAAA,qBADV,EAEK,IAFL,CAEU,iBAAa;AAAA,4BAAX,KAAW,SAAX,KAAW;;AACf,gCAAQ,SAAR,CAAkB,KAAlB,EAAyB,EAAzB,EAA6B,GAA7B;AACA,+BAAO,KAAP;AACH,qBALL,EAMK,IANL,CAMU;AAAA,+BAAS,QAAQ,OAAR,CAAgB,KAAhB,EAAuB,UAAC,GAAD;AAAA,mCAAS,SAAS,MAAT,CAAgB,GAAhB,CAAT;AAAA,yBAAvB,EAAsD,EAAC,OAAO,IAAR,EAAtD,CAAT;AAAA,qBANV;AAOH,iBARD;AASH,aAVM,CAAP;AAWH;;;;;;kBA7BgB,G","file":"rmq.js","sourcesContent":["import amqp from 'amqplib'\nimport Rx from 'rx'\n\nexport default class RMQ {\n    constructor(url) {\n        this.connection = amqp.connect(url)\n    }\n\n    async declarePush(id) {\n        return await (this.connection.then(connection => {\n            connection.createChannel().then(channel => {\n                channel.assertExchange(id, 'topic', {durable: false}).then(({exchange}) => {\n                    return ({topic, data}) => {\n                        channel.publish(exchange, topic, new Buffer(JSON.stringify(data)));\n                    }\n                })\n            })\n        }));\n    }\n\n    declarePull(id, key) {\n        return Rx.Observable.create((observer) => {\n            this.connection.createChannel().then(channel => {\n                channel.assertExchange('server2agents', 'topic', {durable: false})\n                    .then(() => channel.assertQueue(''))\n                    .then(({queue}) => {\n                        channel.bindQueue(queue, id, key);\n                        return queue\n                    })\n                    .then(queue => channel.consume(queue, (msg) => observer.onNext(msg), {noAck: true}))\n            });\n        });\n    }\n}\n"]}